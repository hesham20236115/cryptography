package com.mycompany.desdemo;

import java.util.Scanner;

public class DESDemo {
    // first Permutation table
    private static final int[] IP = {
        58,50,42,34,26,18,10,2,
        60,52,44,36,28,20,12,4,
        62,54,46,38,30,22,14,6,
        64,56,48,40,32,24,16,8,
        57,49,41,33,25,17,9,1,
        59,51,43,35,27,19,11,3,
        61,53,45,37,29,21,13,5,
        63,55,47,39,31,23,15,7
    };

    // last Permutation table
    private static final int[] IP2 = {
        40,8,48,16,56,24,64,32,
        39,7,47,15,55,23,63,31,
        38,6,46,14,54,22,62,30,
        37,5,45,13,53,21,61,29,
        36,4,44,12,52,20,60,28,
        35,3,43,11,51,19,59,27,
        34,2,42,10,50,18,58,26,
        33,1,41,9,49,17,57,25
    };

    // Expansion from 32 bits to 48 bits)
    private static final int[] Ex = {
        32,1,2,3,4,5,4,5,6,7,8,9,
        8,9,10,11,12,13,12,13,14,15,16,17,
        16,17,18,19,20,21,20,21,22,23,24,25,
        24,25,26,27,28,29,28,29,30,31,32,1
    };

    // Permutation for 32 bits
    private static final int[] P = {
        16,7,20,21,29,12,28,17,
         1,15,23,26,5,18,31,10,
         2,8,24,14,32,27,3,9,
        19,13,30,6,22,11,4,25
    };

    // PC from 64 to 56 bits
    private static final int[] PC1 = {
        57,49,41,33,25,17,9, 
         1,58,50,42,34,26,18,
        10,2,59,51,43,35,27,
        19,11,3,60,52,44,36,
        63,55,47,39,31,23,15,
         7,62,54,46,38,30,22,
        14,6,61,53,45,37,29,
        21,13,5,28,20,12,4
    };

    // PC 2 from 56 to 48 bits)
    private static final int[] PC2 = {
        14,17,11,24,1,5,
        3,28,15,6,21,10,
        23,19,12,4,26,8,
        16,7,27,20,13,2,
        41,52,31,37,47,55,
        30,40,51,45,33,48,
        44,49,39,56,34,53,
        46,42,50,36,29,32
    };

    // Num of left shifts in one round
    private static final int[] SHIFTS = {
        1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1
    };

    // The eight DES S‑boxes
    private static final int[][][] SBOX = {
        { //1
          {14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7},
          {0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8},
          {4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0},
          {15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13}
        },{
        // 2
          {15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10},
          {3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5},
          {0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15},
          {13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9}
        },{
        // 3
          {10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8},
          {13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1},
          {13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7},
          {1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12}
        },{
        // 4
          {7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15},
          {13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9},
          {10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4},
          {3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14}
        },{
        // 5
          {2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9},
          {14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6},
          {4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14},
          {11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3}
        },{
        // 6
          {12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11},
          {10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8},
          {9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6},
          {4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13}
        },{
        // 7
          {4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1},
          {13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6},
          {1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2},
          {6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12}
        },{
        //8
          {13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7},
          {1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2},
          {7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8},
          {2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11}
        }
    };

    // Applying permutation table to input
    private static boolean[] permute(int[] table, boolean[] in) {
        boolean[] out = new boolean[table.length];
        for (int i = 0; i < table.length; i++) {
            out[i] = in[table[i] - 1];
        }
        return out;
    }

    // Left rotate bits
    private static boolean[] rotateLeft(boolean[] in, int n) {
        boolean[] out = new boolean[in.length];
        System.arraycopy(in, n, out, 0, in.length - n);
        System.arraycopy(in, 0, out, in.length - n, n);
        return out;
    }

    // the 16 subkeys 48 bits each
    private static boolean[][] generateSubkeys(boolean[] key64) {
        // PC1 ->56 bits
        boolean[] perm56 = permute(PC1, key64);
        // split C and D to 28 bits
        boolean[] C = new boolean[28], D = new boolean[28];
        System.arraycopy(perm56, 0, C, 0, 28);
        System.arraycopy(perm56, 28, D, 0, 28);

        boolean[][] subkeys = new boolean[16][48];
        for (int i = 0; i < 16; i++) {
            // left shifts
            C = rotateLeft(C, SHIFTS[i]);
            D = rotateLeft(D, SHIFTS[i]);
            // combine C an D
            boolean[] CD = new boolean[56];
            System.arraycopy(C, 0, CD, 0, 28);
            System.arraycopy(D, 0, CD, 28, 28);
            // PC‑2 ->48 bits
            subkeys[i] = permute(PC2, CD);
        }
        return subkeys;
    }

    // Feistel function  E XOR subkey → S‑boxes → P
    private static boolean[] feistel(boolean[] R, boolean[] subkey) {
        // Expand R 32 to 48
        boolean[] ER = permute(Ex, R);
        // XOR with key
        for (int i = 0; i < 48; i++) ER[i] ^= subkey[i];
        // using  S‑boxes: 48 to 32 again
        boolean[] out32 = new boolean[32];
        for (int box = 0; box < 8; box++) {
            int offset48 = box * 6;
            int row = (ER[offset48] ? 2 : 0) | (ER[offset48 + 5] ? 1 : 0);
            int col = (ER[offset48 + 1] ? 8 : 0)
                    | (ER[offset48 + 2] ? 4 : 0)
                    | (ER[offset48 + 3] ? 2 : 0)
                    | (ER[offset48 + 4] ? 1 : 0);
            int sVal = SBOX[box][row][col];
            // write 4 bits
            for (int b = 0; b < 4; b++) {
                out32[box * 4 + (3 - b)] = ((sVal >> b) & 1) == 1;
            }
        }
        //permutation
        return permute(P, out32);
    }

    // Encrypt , decrypt
    private static boolean[] desBlock(boolean[] block64, boolean[][] subkeys) {
        // Initial Permutation
        boolean[] ip = permute(IP, block64);
        // split into L and R
        boolean[] L = new boolean[32], R = new boolean[32];
        System.arraycopy(ip, 0, L, 0, 32);
        System.arraycopy(ip, 32, R, 0, 32);

        // in 16 rounds as des
        for (int i = 0; i < 16; i++) {
            boolean[] F = feistel(R, subkeys[i]);
            //  Lnew = R ,  Rnew = L ^ f(R)
            boolean[] Rn = new boolean[32];
            for (int j = 0; j < 32; j++) Rn[j] = L[j] ^ F[j];
            L = R;
            R = Rn;
        }

        // Preoutput = R,L swaped
        boolean[] Out = new boolean[64];
        System.arraycopy(R, 0, Out, 0, 32);
        System.arraycopy(L, 0, Out, 32, 32);

        // Final Permutation
        return permute(IP2, Out);
    }

    // Convert ASCII string to 64 bit 
    private static boolean[] stringToBits(String s) {
        boolean[] bits = new boolean[64];
        for (int i = 0; i < 8; i++) {
            int val = s.charAt(i);
            for (int b = 0; b < 8; b++) {
                bits[i * 8 + (7 - b)] = ((val >> b) & 1) == 1;
            }
        }
        return bits;
    }

    // then Convert 64 bit  to 8‑char ASCII string
    private static String bitsToString(boolean[] bits) {
        char[] out = new char[8];
        for (int i = 0; i < 8; i++) {
            int val = 0;
            for (int b = 0; b < 8; b++) {
                if (bits[i * 8 + b]) val |= (1 << (7 - b));
            }
            out[i] = (char) val;
        }
        return new String(out);
    }

    // Convert 64‑bit array to hex 
    private static String bitsToHex(boolean[] bits) {
        StringBuilder sb = new StringBuilder(16);
        for (int i = 0; i < 16; i++) {
            int hex = 0;
            for (int b = 0; b < 4; b++) {
                if (bits[i * 4 + b]) hex |= (1 << (3 - b));
            }
            sb.append(Integer.toHexString(hex).toUpperCase());
        }
        return sb.toString();
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter plaintext(8): ");
        String pt = sc.nextLine();
        System.out.print("Enter key(8):  ");
        String key = sc.nextLine();
        if (pt.length()!=8||key.length()!=8) {
            System.err.println("Both must be 8 chars."); 
            return;
        }

        // Convert to bits
        boolean[] plainBits = stringToBits(pt);
        boolean[] keyBits   = stringToBits(key);

        // Generate subkeys
        boolean[][] subkeys = generateSubkeys(keyBits);

        // Encrypt
        boolean[] cipherBits = desBlock(plainBits, subkeys);
        String cipherHex = bitsToHex(cipherBits);

        // Decrypt subkeys reversed
        boolean[][] revKeys = new boolean[16][48];
        for (int i = 0; i < 16; i++) revKeys[i] = subkeys[15 - i];
        boolean[] decryptedBits = desBlock(cipherBits, revKeys);
        String decryptedText = bitsToString(decryptedBits);

        // Display
        System.out.println(" plaintext:  " + pt);
        System.out.println(" Encrypted: " + cipherHex);
        System.out.println(" Decrypted: " + decryptedText);
    }
}